summarise(count = n(), .groups = "drop") %>%
# Spread the data to get separate columns for Male and Female counts
pivot_wider(names_from = Sex, values_from = count, values_fill = list(count = 0)) %>%
# Calculate the sex ratio per year (Male births per 100 Female births)
mutate(Sex_Ratio = (Male / Female) * 100) %>%
# Select relevant columns for final output
select(Year_of_Birth, Sex_Ratio)
# Display the result
sex_ratio_per_year
#| label: fig-1
#| fig-cap: "Sex Ratio at Birth"
library(dplyr)
# Assuming `data` is your data frame with columns `Sex` and `Year_of_Birth`
sex_ratio_per_year <- data %>%
# Group by Year_of_Birth and Sex
group_by(Year_of_Birth, Sex) %>%
# Count the number of births per year by sex
summarise(count = n(), .groups = "drop") %>%
# Spread the data to get separate columns for Male and Female counts
pivot_wider(names_from = Sex, values_from = count, values_fill = list(count = 0)) %>%
# Calculate the sex ratio per year (Male births per 100 Female births)
mutate(Sex_Ratio = (Male / Female) * 100) %>%
# Select relevant columns for final output
select(Year_of_Birth, Sex_Ratio)
# Render the table in HTML or LaTeX depending on the output format
if (knitr::is_html_output()) {
sex_ratio_per_year |>
kable("html", caption = "") |>
kable_styling(bootstrap_options = c("striped", "hover", "condensed"))
} else if (knitr::is_latex_output()) {
sex_ratio_per_year |>
kable("latex", booktabs = TRUE, caption = "Sex Ratio at Birth by Year", longtable = TRUE) |>
kable_styling()
}
#| label: tbl-2
#| tbl-cap: "Sex Ratio at Birth"
library(dplyr)
# Assuming `data` is your data frame with columns `Sex` and `Year_of_Birth`
sex_ratio_per_year <- data %>%
# Group by Year_of_Birth and Sex
group_by(Year_of_Birth, Sex) %>%
# Count the number of births per year by sex
summarise(count = n(), .groups = "drop") %>%
# Spread the data to get separate columns for Male and Female counts
pivot_wider(names_from = Sex, values_from = count, values_fill = list(count = 0)) %>%
# Calculate the sex ratio per year (Male births per 100 Female births)
mutate(Sex_Ratio = (Male / Female) * 100) %>%
# Select relevant columns for final output
select(Year_of_Birth, Sex_Ratio)%>%
setNames(c("Year of Birth", "Female", "Male"))
# Render the table in HTML or LaTeX depending on the output format
if (knitr::is_html_output()) {
sex_ratio_per_year |>
kable("html", caption = "") |>
kable_styling(bootstrap_options = c("striped", "hover", "condensed"))
} else if (knitr::is_latex_output()) {
sex_ratio_per_year |>
kable("latex", booktabs = TRUE, caption = "Sex Ratio at Birth by Year", longtable = TRUE) |>
kable_styling()
}
#| label: tbl-2
#| tbl-cap: "Sex Ratio at Birth"
library(dplyr)
# Assuming `data` is your data frame with columns `Sex` and `Year_of_Birth`
sex_ratio_per_year <- data %>%
# Group by Year_of_Birth and Sex
group_by(Year_of_Birth, Sex) %>%
# Count the number of births per year by sex
summarise(count = n(), .groups = "drop") %>%
# Spread the data to get separate columns for Male and Female counts
pivot_wider(names_from = Sex, values_from = count, values_fill = list(count = 0)) %>%
# Calculate the sex ratio per year (Male births per 100 Female births)
mutate(Sex_Ratio = round((Male / Female) * 100)) %>%
# Select relevant columns for final output
select(Year_of_Birth, Sex_Ratio)%>%
setNames(c("Year of Birth", "Sex Ratio"))
# Render the table in HTML or LaTeX depending on the output format
if (knitr::is_html_output()) {
sex_ratio_per_year |>
kable("html", caption = "") |>
kable_styling(bootstrap_options = c("striped", "hover", "condensed"))
} else if (knitr::is_latex_output()) {
sex_ratio_per_year |>
kable("latex", booktabs = TRUE, caption = "Sex Ratio at Birth by Year", longtable = TRUE) |>
kable_styling()
}
View(sex_ratio_per_year)
::: {.tabs} ::: {.tab-set} ### Chart {r} highchart() %>% hc_chart(type = "line") %>% hc_title(text = "Total births recorded by sex and year") %>% hc_xAxis(categories = data_for_chart$Year_of_Birth) %>% hc_yAxis(title = list(text = "Total births")) %>% hc_series(list(name = "Male", data = data_for_chart$Male, color = "#02263f"), list(name = "Female", data = data_for_chart$Female, color = "#fa2f7c")) %>% hc_tooltip(shared = TRUE, crosshairs = TRUE) :::
knitr::opts_chunk$set(cache = FALSE)
# Use cache = TRUE if you want to speed up compilation
knitr::opts_knit$set(output.format = "html")  # Set to "html" for HTML output
# A function to allow for showing some of the inline code
rinline <- function(code){
html <- '<code  class="r">``` `r CODE` ```</code>'
sub("CODE", code, html)
}
ac_for_graph=table(person$age_5yr_grp_80)
ac_for_graph=person$age_5yr_grp_80
person20 <- subset(person, person$constituency == const)
knitr::opts_chunk$set(cache = FALSE)
# Use cache = TRUE if you want to speed up compilation
knitr::opts_knit$set(output.format = "html")  # Set to "html" for HTML output
# A function to allow for showing some of the inline code
rinline <- function(code){
html <- '<code  class="r">``` `r CODE` ```</code>'
sub("CODE", code, html)
}
library(DBI)
library(RSQLite)
library(dplyr)
library(tidyr)
library(kableExtra)
db_connection <- dbConnect(RSQLite::SQLite(), "data/census2020_CP.SQLite")
person <- dbReadTable(db_connection, 'person')
household <- dbReadTable(db_connection, 'household')
const <- "efate"
person20 <- subset(person, person$constituency == const)
person20 <- subset(person, person$constituency == const)
ac_for_graph=table(person20$age_5yr_grp_80)
#| label: fig-1
#| fig-cap: "constituency and national population distribution by 5−year age groups"
ac_for_graph=table(person20$age_5yr_grp_80)
#| label: fig-1
#| fig-cap: "constituency and national population distribution by 5−year age groups"
ac_for_graph=table(person20$age_5yr_grp_80)
ac_for_graph
ac_for_graph=data.frame(table(person20$age_5yr_grp_80))
View(ac_for_graph)
ac_for_graph |>
kable("latex", booktabs = TRUE, linesep = "", caption = "Sex Ratio at Birth by Year", longtable = TRUE) |>
kable_styling(fixed_thead = T, "striped")
#| label: fig-1
#| fig-cap: "constituency and national population distribution by 5−year age groups"
ac_for_graph=data.frame(table(person20$age_5yr_grp_80))
plot <- ggplot(ac_for_graph, aes(x = as.factor(n), color = Sex)) +
geom_line(stat = "count", aes(group = Sex), size = 1) +
labs(x = "Year of Birth", y = "Group Age") +
theme_classic() +
scale_color_manual(values = c("Male" = "#02263f", "Female" = "#fa2f7c"))
library(ggplot2)
plot <- ggplot(ac_for_graph, aes(x = as.factor(n), color = Sex)) +
geom_line(stat = "count", aes(group = Sex), size = 1) +
labs(x = "Year of Birth", y = "Group Age") +
theme_classic() +
scale_color_manual(values = c("Male" = "#02263f", "Female" = "#fa2f7c"))
plot <- ggplot(ac_for_graph, aes(x = as.factor(n), color = Sex)) +
geom_line(stat = "count", aes(group = Sex), linewidth = 1) +
labs(x = "Year of Birth", y = "Group Age") +
theme_classic() +
scale_color_manual(values = c("Male" = "#02263f", "Female" = "#fa2f7c"))
plot
shiny::runApp('RDashboard/shiny-enterprise-dashboard')
runApp('RDashboard/cpi-dashboard')
appsilonLogo <- HTML("
<svg class='logo-svg' viewBox='0 0 660.52 262.96'>
<use href='assets/icons/icons-sprite-map.svg#appsilon-logo'></use>
</svg>
")
runApp('RDashboard/cpi-dashboard')
runApp('RDashboard/cpi-dashboard')
runApp('RDashboard/cpi-dashboard')
#| context: setup
# Load necessary libraries
library(DBI)
library(RSQLite)
library(dplyr)
library(ggplot2)
library(shiny)
# Connect to SQLite database
db_connection <- dbConnect(RSQLite::SQLite(), "data/cpi.db")
# Load dataset
yearly_data <- dbReadTable(db_connection, "yearly_comp")
expenditure_data <- dbReadTable(db_connection, "exp_comp")
# Disconnect from the database
dbDisconnect(db_connection)
# Create unique selections for filters
years <- unique(expenditure_data$Year)
locations <- unique(expenditure_data$Location)
expenditure_groups <- unique(expenditure_data$'ExpenditureGroup')
# Inputs for selecting Year, Location, and Expenditure Group
selectInput("year", "Select Year", choices = years, selected = years[1])
selectInput("location", "Select Location", choices = locations, selected = locations[1])
selectInput("expenditureGroup", "Select Expenditure Group", choices = expenditure_groups, selected = expenditure_groups[1])
#| context: server
# Filter data reactively based on user input
filtered_data <- reactive({
expenditure_data %>%
filter(Year == input$year, Location == input$location, 'ExpenditureGroup' == input$expenditureGroup)
})
# Render the selection text
output$selectionText <- renderText({
paste("You selected the year:", input$year,
", location:", input$location,
", and expenditure group:", input$expenditureGroup)
})
#| context: server
# Filter data reactively based on user input
filtered_data <- reactive({
expenditure_data %>%
filter(Year == input$year, Location == input$location, 'ExpenditureGroup' == input$expenditureGroup)
})
# Render the selection text
output$selectionText <- renderText({
paste("You selected the year:", input$year,
", location:", input$location,
", and expenditure group:", input$expenditureGroup)
})
#| context: setup
# Load necessary libraries
library(DBI)
library(RSQLite)
library(dplyr)
library(ggplot2)
library(shiny)
# Connect to SQLite database
db_connection <- dbConnect(RSQLite::SQLite(), "data/cpi.db")
#| context: setup
# Load necessary libraries
library(DBI)
library(RSQLite)
library(dplyr)
library(ggplot2)
library(shiny)
# Connect to SQLite database
db_connection <- dbConnect(RSQLite::SQLite(), "data/cpi.db")
# Load dataset
yearly_data <- dbReadTable(db_connection, "yearly_comp")
expenditure_data <- dbReadTable(db_connection, "exp_comp")
# Disconnect from the database
dbDisconnect(db_connection)
# Create unique selections for filters
years <- unique(expenditure_data$Year)
locations <- unique(expenditure_data$Location)
expenditure_groups <- unique(expenditure_data$`Expenditure Group`)
# Inputs for selecting Year, Location, and Expenditure Group
selectInput("year", "Select Year", choices = years, selected = years[1])
selectInput("location", "Select Location", choices = locations, selected = locations[1])
selectInput("expenditureGroup", "Select Expenditure Group", choices = expenditure_groups, selected = expenditure_groups[1])
#| context: setup
# Load necessary libraries
library(DBI)
library(RSQLite)
library(dplyr)
library(ggplot2)
library(shiny)
# Connect to SQLite database
db_connection <- dbConnect(RSQLite::SQLite(), "data/cpi.db")
# Load dataset
yearly_data <- dbReadTable(db_connection, "yearly_comp")
expenditure_data <- dbReadTable(db_connection, "exp_comp")
# Disconnect from the database
dbDisconnect(db_connection)
# Create unique selections for filters
years <- unique(expenditure_data$Year)
locations <- unique(expenditure_data$Location)
expenditure_groups <- unique(expenditure_data$'ExpenditureGroup')
# Inputs for selecting Year, Location, and Expenditure Group
selectInput("year", "Select Year", choices = years, selected = years[1])
selectInput("location", "Select Location", choices = locations, selected = locations[1])
selectInput("expenditureGroup", "Select Expenditure Group", choices = expenditure_groups, selected = expenditure_groups[1])
# Main panel layout
mainPanel(
textOutput("selectionText"),  # Show the selected inputs
plotOutput("plot"),           # Display the plot
tableOutput("dataTable")      # Show the filtered data table
)
#| context: server
function(input, output, session) {
# Reactive filtering based on user input
filtered_data <- reactive({
expenditure_data %>%
filter(
Year == input$year,
Location == input$location,
`Expenditure Group` == input$expenditureGroup
)
})
# Render the selection text
output$selectionText <- renderText({
paste(
"You selected the year:", input$year,
", location:", input$location,
", and expenditure group:", input$expenditureGroup
)
})
# Output the filtered data table
output$dataTable <- renderTable({
filtered_data()
})
# Render plot based on filtered data
output$plot <- renderPlot({
ggplot(filtered_data(), aes(x = Year, y = Value)) +
geom_line() +
labs(title = "CPI Trends", x = "Year", y = "CPI Value")
})
}
View(plot)
#| context: setup
# Load necessary libraries
library(DBI)
library(RSQLite)
library(dplyr)
library(ggplot2)
library(shiny)
# Connect to SQLite database
db_connection <- dbConnect(RSQLite::SQLite(), "data/cpi.db")
# Load dataset
yearly_data <- dbReadTable(db_connection, "yearly_comp")
expenditure_data <- dbReadTable(db_connection, "exp_comp")
# Disconnect from the database
dbDisconnect(db_connection)
# Create unique selections for filters
years <- unique(expenditure_data$Year)
locations <- unique(expenditure_data$Location)
expenditure_groups <- unique(expenditure_data$ExpenditureGroup)
# Inputs for selecting Year, Location, and Expenditure Group
selectInput("year", "Select Year", choices = years, selected = years[1])
selectInput("location", "Select Location", choices = locations, selected = locations[1])
selectInput("expenditureGroup", "Select Expenditure Group", choices = expenditure_groups, selected = expenditure_groups[1])
#| context: server
function(input, output, session) {
# Reactive filtering based on user input
filtered_data <- reactive({
expenditure_data %>%
filter(
Year == input$year,
Location == input$location,
`Expenditure Group` == input$expenditureGroup
)
})
# Render the selection text
output$selectionText <- renderText({
paste(
"You selected the year:", input$year,
", location:", input$location,
", and expenditure group:", input$expenditureGroup
)
})
# Output the filtered data table
output$dataTable <- renderTable({
filtered_data()
})
# Render plot based on filtered data
output$plot <- renderPlot({
ggplot(filtered_data(), aes(x = Year, y = Value)) +
geom_line() +
labs(title = "CPI Trends", x = "Year", y = "CPI Value")
})
}
#| context: server
function(input, output, session) {
# Reactive filtering based on user input
filtered_data <- reactive({
expenditure_data %>%
filter(
Year == input$year,
Location == input$location,
`Expenditure Group` == input$expenditureGroup
)
})
# Render the selection text
output$selectionText <- renderText({
paste(
"You selected the year:", input$year,
", location:", input$location,
", and expenditure group:", input$expenditureGroup
)
})
# Output the filtered data table
output$dataTable <- renderTable({
filtered_data()
})
# Render plot based on filtered data
output$plot <- renderPlot({
ggplot(filtered_data(), aes(x = Year, y = Value)) +
geom_line() +
labs(title = "CPI Trends", x = "Year", y = "CPI Value")
})
}
#| context: setup
# Load necessary libraries
library(DBI)
library(RSQLite)
library(dplyr)
library(ggplot2)
library(shiny)
# Connect to SQLite database
db_connection <- dbConnect(RSQLite::SQLite(), "data/cpi.db")
# Load dataset
yearly_data <- dbReadTable(db_connection, "yearly_comp")
expenditure_data <- dbReadTable(db_connection, "exp_comp")
# Disconnect from the database
dbDisconnect(db_connection)
# Create unique selections for filters
years <- unique(expenditure_data$Year)
locations <- unique(expenditure_data$Location)
expenditure_groups <- unique(expenditure_data$ExpenditureGroup)
# Inputs for selecting Year, Location, and Expenditure Group
selectInput("year", "Select Year", choices = years, selected = years[1])
selectInput("location", "Select Location", choices = locations, selected = locations[1])
selectInput("expenditureGroup", "Select Expenditure Group", choices = expenditure_groups, selected = expenditure_groups[1])
# Main panel layout
#textOutput("selectionText")
plotOutput("plot")
#tableOutput("dataTable")
#| context: server
function(input, output, session) {
# Reactive filtering based on user input
filtered_data <- reactive({ expenditure_data %>% filter( Year == input$year, Location == input$location, ExpenditureGroup == input$expenditureGroup ) })
# Render plot based on filtered data
output$plot <- renderPlot({ ggplot(filtered_data(), aes(x = Year, y = Value)) + geom_line() + labs(title = "CPI Trends", x = "Year", y = "CPI Value") })
}
output$filteredTable <- renderTable({
filtered_data()
})
#| context: server
function(input, output, session) {
# Reactive filtering based on user input
filtered_data <- reactive({
expenditure_data %>%
filter(
Year == input$year,
Location == input$location,
ExpenditureGroup == input$expenditureGroup
)
})
# Render plot based on filtered data
output$plot <- renderPlot({
req(filtered_data())  # Ensure filtered data exists
ggplot(filtered_data(), aes(x = Year, y = Value)) +
geom_line() +
labs(title = "CPI Trends", x = "Year", y = "CPI Value")
})
# Render filtered data table (optional for debugging)
output$filteredTable <- renderTable({
req(filtered_data())  # Ensure data is valid
filtered_data()
})
}
#| echo: false
#| include: false
ojs_define("years_json", years)
# Load necessary libraries
library(DBI)
library(RSQLite)
library(dplyr)
library(jsonlite)
# Connect to SQLite database
db_connection <- dbConnect(RSQLite::SQLite(), "data/cpi.db")
# Load dataset
yearly_data <- dbReadTable(db_connection, "yearly_comp")
expenditure_data <- dbReadTable(db_connection, "exp_comp")
# Disconnect from the database
dbDisconnect(db_connection)
# Create unique selections for filters
years <- unique(expenditure_data$Year)
locations <- unique(expenditure_data$Location)
expenditure_groups <- unique(expenditure_data$ExpenditureGroup)
#| echo: false
#| include: false
ojs_define("years_json", years)
#| echo: false
#| include: false
ojs_define(years_json = years)
#| echo: false
#| include: false
library(dplyr)
ojs_define(years_json = years)
library(ojsutils)
install.packages("ojsutils")
shiny::runApp('RDashboard/shinyDashboard/NSDP-Dashboard')
install.packages("sf")
install.packages("sf")
runApp('RDashboard/shinyDashboard/NSDP-Dashboard')
runApp('RDashboard/shinyDashboard/NSDP-Dashboard')
runApp('RDashboard/shinyDashboard/NSDP-Dashboard')
runApp('RDashboard/shinyDashboard/NSDP-Dashboard')
print(names(province_geo))
# Load the datasets
affected_shocks_df <- read_excel("data/affected by shock.xlsx", sheet = "affected by shock")
runApp('RDashboard/shinyDashboard/NSDP-Dashboard')
# Load the datasets
affected_shocks_df <- read_excel("data/affected by shock.xlsx", sheet = "affected by shock")
library(readr)
library(readxl)
library(dplyr)
library(leaflet)
library(sf)
# Load the datasets
affected_shocks_df <- read_excel("affected by shock.xlsx", sheet = "affected by shock")
# Load the datasets
affected_shocks_df <- read_excel("affectedbyshock.xlsx", sheet = "affected by shock")
# Load the datasets
affected_shocks_df <- read_excel("data/affectedbyshock.xlsx", sheet = "affected by shock")
repository <- file.path(dirname(rstudioapi::getSourceEditorContext()$path))
setwd(repository) # sets the working directory to the 'repository' variable
# Load the datasets
affected_shocks_df <- read_excel("data/affectedbyshock.xlsx", sheet = "affected by shock")
runApp()
View(affected_shocks_df)
province_geo <- st_read("data/vanuatuMaps/2016_PHC_Vanuatu_Province_4326.geojson")
View(province_geo)
# Rename the column in `province_geo` to match `affected_shocks_df`
if (!"Total households - Province" %in% names(province_geo)) {
province_geo <- province_geo %>%
rename(`Total households - Province` = pname) # Replace `ExistingColumnName` with actual column
}
runApp()
# Load the datasets
affected_shocks_df <- read_excel("data/affectedbyshock.xlsx", sheet = "affected by shock")
runApp()
runApp()
